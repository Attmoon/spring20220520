<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!--  652page -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<!-- http의 request와 response에 관련된 설정 -->
	<security:http>
		<security:csrf disabled="true"/>
		<security:form-login always-use-default-target="true" login-page="/member/login" default-target-url="/board/list" /> <!-- 로그인 성공시 경로 -->
		<security:logout logout-success-url="/board/list" />
		<security:remember-me/>
		
		<!-- access 속성 작성법 673page -->
		<!-- 게시글 create, update, delete -->
		<security:intercept-url pattern="/board/insert" access="isAuthenticated()" /> <!-- 특정 경로로 오는것은 인증된 사용자만(로그인된) 가능하게끔 -->
		<security:intercept-url pattern="/board/modify" access="isAuthenticated()" />
		<security:intercept-url pattern="/board/remove" access="isAuthenticated()" />
		
		<!-- 댓글 create, update, delete -->
		<!-- <security:intercept-url pattern="/reply/insert" access="isAuthenticated()" /> -->
		<security:intercept-url pattern="/reply/modify" access="isAuthenticated()" />
		<security:intercept-url pattern="/reply/delete" access="isAuthenticated()" />
		
		<!-- 회원 read, update, delete -->
		<security:intercept-url pattern="/member/list" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/member/get" access="isAuthenticated()" /> <!-- 유저도 수정,삭제 할수있어야함 -->
		<security:intercept-url pattern="/member/remove" access="isAuthenticated()" />
		<security:intercept-url pattern="/member/modify" access="isAuthenticated()" />
		
		
	</security:http>
	
	<!-- 인증 매니저
	1. autenticate 인증 (로그인 가능한지 불가능한지 판단)
	2. aythorization 권한
	 -->
	<!-- dataSource는 connection역할 -->
	<security:authentication-manager> <!-- 내놔 정보 -->
		<security:authentication-provider> <!-- db를 통해 제공 -->
			<security:jdbc-user-service 
				data-source-ref="dataSource"
				users-by-username-query="
					SELECT id, password, 1
					FROM Member
					WHERE id = ?
				"
				authorities-by-username-query="
					SELECT memberId, role
					FROM Auth
					WHERE memberId = ?
				"
				/>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
